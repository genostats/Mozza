// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/Mozza.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// GQ
IntegerVector GQ(NumericMatrix phtab);
RcppExport SEXP _Mozza_GQ(SEXP phtabSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type phtab(phtabSEXP);
    rcpp_result_gen = Rcpp::wrap(GQ(phtab));
    return rcpp_result_gen;
END_RCPP
}
// GT
IntegerVector GT(NumericMatrix phtab);
RcppExport SEXP _Mozza_GT(SEXP phtabSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type phtab(phtabSEXP);
    rcpp_result_gen = Rcpp::wrap(GT(phtab));
    return rcpp_result_gen;
END_RCPP
}
// cousins_1stdegree
List cousins_1stdegree(int n, double tile_length, XPtr<matrix4> Haplos, IntegerVector chr, NumericVector dist, bool kinship, bool fraternity);
RcppExport SEXP _Mozza_cousins_1stdegree(SEXP nSEXP, SEXP tile_lengthSEXP, SEXP HaplosSEXP, SEXP chrSEXP, SEXP distSEXP, SEXP kinshipSEXP, SEXP fraternitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type tile_length(tile_lengthSEXP);
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type Haplos(HaplosSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< bool >::type kinship(kinshipSEXP);
    Rcpp::traits::input_parameter< bool >::type fraternity(fraternitySEXP);
    rcpp_result_gen = Rcpp::wrap(cousins_1stdegree(n, tile_length, Haplos, chr, dist, kinship, fraternity));
    return rcpp_result_gen;
END_RCPP
}
// drop_genotypes
List drop_genotypes(List Z, XPtr<matrix4> Haplos, IntegerVector chr, NumericVector dist);
RcppExport SEXP _Mozza_drop_genotypes(SEXP ZSEXP, SEXP HaplosSEXP, SEXP chrSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type Haplos(HaplosSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(drop_genotypes(Z, Haplos, chr, dist));
    return rcpp_result_gen;
END_RCPP
}
// drop_genotypes_to_vcf
void drop_genotypes_to_vcf(List Z, std::string filename, XPtr<matrix4> Haplos, IntegerVector chr, NumericVector dist, CharacterVector id, IntegerVector pos, CharacterVector A1, CharacterVector A2);
RcppExport SEXP _Mozza_drop_genotypes_to_vcf(SEXP ZSEXP, SEXP filenameSEXP, SEXP HaplosSEXP, SEXP chrSEXP, SEXP distSEXP, SEXP idSEXP, SEXP posSEXP, SEXP A1SEXP, SEXP A2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type Haplos(HaplosSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pos(posSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type A2(A2SEXP);
    drop_genotypes_to_vcf(Z, filename, Haplos, chr, dist, id, pos, A1, A2);
    return R_NilValue;
END_RCPP
}
// haplo_drop_tile_index
Rcpp::IntegerVector haplo_drop_tile_index(Rcpp::XPtr<mozza::mosaic> xpm, IntegerVector chr, NumericVector pos);
RcppExport SEXP _Mozza_haplo_drop_tile_index(SEXP xpmSEXP, SEXP chrSEXP, SEXP posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<mozza::mosaic> >::type xpm(xpmSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos(posSEXP);
    rcpp_result_gen = Rcpp::wrap(haplo_drop_tile_index(xpm, chr, pos));
    return rcpp_result_gen;
END_RCPP
}
// zygote_drop_tile_index
Rcpp::List zygote_drop_tile_index(Rcpp::XPtr<mozza::zygote> xpz, IntegerVector chr, NumericVector pos);
RcppExport SEXP _Mozza_zygote_drop_tile_index(SEXP xpzSEXP, SEXP chrSEXP, SEXP posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<mozza::zygote> >::type xpz(xpzSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos(posSEXP);
    rcpp_result_gen = Rcpp::wrap(zygote_drop_tile_index(xpz, chr, pos));
    return rcpp_result_gen;
END_RCPP
}
// getAutosomes
NumericVector getAutosomes();
RcppExport SEXP _Mozza_getAutosomes() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getAutosomes());
    return rcpp_result_gen;
END_RCPP
}
// setAutosomes
void setAutosomes(NumericVector A);
RcppExport SEXP _Mozza_setAutosomes(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    setAutosomes(A);
    return R_NilValue;
END_RCPP
}
// getGenoVector
IntegerVector getGenoVector(XPtr<matrix4> pA, unsigned int snpIndex, bool Rindex);
RcppExport SEXP _Mozza_getGenoVector(SEXP pASEXP, SEXP snpIndexSEXP, SEXP RindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type pA(pASEXP);
    Rcpp::traits::input_parameter< unsigned int >::type snpIndex(snpIndexSEXP);
    Rcpp::traits::input_parameter< bool >::type Rindex(RindexSEXP);
    rcpp_result_gen = Rcpp::wrap(getGenoVector(pA, snpIndex, Rindex));
    return rcpp_result_gen;
END_RCPP
}
// haplo_group_by_tile_index
Rcpp::List haplo_group_by_tile_index(Rcpp::XPtr<mozza::mosaic> xpm, IntegerVector chr, NumericVector pos);
RcppExport SEXP _Mozza_haplo_group_by_tile_index(SEXP xpmSEXP, SEXP chrSEXP, SEXP posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<mozza::mosaic> >::type xpm(xpmSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos(posSEXP);
    rcpp_result_gen = Rcpp::wrap(haplo_group_by_tile_index(xpm, chr, pos));
    return rcpp_result_gen;
END_RCPP
}
// zygote_group_by_tile_index
Rcpp::List zygote_group_by_tile_index(Rcpp::XPtr<mozza::zygote> xpz, IntegerVector chr, NumericVector pos);
RcppExport SEXP _Mozza_zygote_group_by_tile_index(SEXP xpzSEXP, SEXP chrSEXP, SEXP posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<mozza::zygote> >::type xpz(xpzSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos(posSEXP);
    rcpp_result_gen = Rcpp::wrap(zygote_group_by_tile_index(xpz, chr, pos));
    return rcpp_result_gen;
END_RCPP
}
// haplotype_
Rcpp::XPtr<mozza::mosaic> haplotype_(int ntiles, double mean_length_tiles);
RcppExport SEXP _Mozza_haplotype_(SEXP ntilesSEXP, SEXP mean_length_tilesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ntiles(ntilesSEXP);
    Rcpp::traits::input_parameter< double >::type mean_length_tiles(mean_length_tilesSEXP);
    rcpp_result_gen = Rcpp::wrap(haplotype_(ntiles, mean_length_tiles));
    return rcpp_result_gen;
END_RCPP
}
// haplotype_probs
Rcpp::XPtr<mozza::mosaic> haplotype_probs(NumericVector probaTiles, double mean_length_tiles);
RcppExport SEXP _Mozza_haplotype_probs(SEXP probaTilesSEXP, SEXP mean_length_tilesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type probaTiles(probaTilesSEXP);
    Rcpp::traits::input_parameter< double >::type mean_length_tiles(mean_length_tilesSEXP);
    rcpp_result_gen = Rcpp::wrap(haplotype_probs(probaTiles, mean_length_tiles));
    return rcpp_result_gen;
END_RCPP
}
// haplotype_peek
Rcpp::DataFrame haplotype_peek(Rcpp::XPtr<mozza::mosaic> xpm);
RcppExport SEXP _Mozza_haplotype_peek(SEXP xpmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<mozza::mosaic> >::type xpm(xpmSEXP);
    rcpp_result_gen = Rcpp::wrap(haplotype_peek(xpm));
    return rcpp_result_gen;
END_RCPP
}
// zygote_peek
Rcpp::List zygote_peek(Rcpp::XPtr<mozza::zygote> xpz);
RcppExport SEXP _Mozza_zygote_peek(SEXP xpzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<mozza::zygote> >::type xpz(xpzSEXP);
    rcpp_result_gen = Rcpp::wrap(zygote_peek(xpz));
    return rcpp_result_gen;
END_RCPP
}
// haplotype_poke
void haplotype_poke(Rcpp::XPtr<mozza::mosaic> xpm, IntegerVector tile_index, IntegerVector tile);
RcppExport SEXP _Mozza_haplotype_poke(SEXP xpmSEXP, SEXP tile_indexSEXP, SEXP tileSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<mozza::mosaic> >::type xpm(xpmSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tile_index(tile_indexSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tile(tileSEXP);
    haplotype_poke(xpm, tile_index, tile);
    return R_NilValue;
END_RCPP
}
// zygote_poke
void zygote_poke(Rcpp::XPtr<mozza::zygote> xpz, IntegerVector tile_index1, IntegerVector tile1, IntegerVector tile_index2, IntegerVector tile2);
RcppExport SEXP _Mozza_zygote_poke(SEXP xpzSEXP, SEXP tile_index1SEXP, SEXP tile1SEXP, SEXP tile_index2SEXP, SEXP tile2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<mozza::zygote> >::type xpz(xpzSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tile_index1(tile_index1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tile1(tile1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tile_index2(tile_index2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tile2(tile2SEXP);
    zygote_poke(xpz, tile_index1, tile1, tile_index2, tile2);
    return R_NilValue;
END_RCPP
}
// kinship_matrix_
NumericMatrix kinship_matrix_(List L);
RcppExport SEXP _Mozza_kinship_matrix_(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(kinship_matrix_(L));
    return rcpp_result_gen;
END_RCPP
}
// liabilitySelectedInds
List liabilitySelectedInds(IntegerVector groupSize, NumericVector minimumLiability, NumericVector maximumLiability, double length_tiles, XPtr<matrix4> Haplos, IntegerVector chr, NumericVector dist, IntegerVector submap, NumericVector beta, double h2, bool kinship, bool fraternity);
RcppExport SEXP _Mozza_liabilitySelectedInds(SEXP groupSizeSEXP, SEXP minimumLiabilitySEXP, SEXP maximumLiabilitySEXP, SEXP length_tilesSEXP, SEXP HaplosSEXP, SEXP chrSEXP, SEXP distSEXP, SEXP submapSEXP, SEXP betaSEXP, SEXP h2SEXP, SEXP kinshipSEXP, SEXP fraternitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type groupSize(groupSizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type minimumLiability(minimumLiabilitySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maximumLiability(maximumLiabilitySEXP);
    Rcpp::traits::input_parameter< double >::type length_tiles(length_tilesSEXP);
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type Haplos(HaplosSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type submap(submapSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< bool >::type kinship(kinshipSEXP);
    Rcpp::traits::input_parameter< bool >::type fraternity(fraternitySEXP);
    rcpp_result_gen = Rcpp::wrap(liabilitySelectedInds(groupSize, minimumLiability, maximumLiability, length_tiles, Haplos, chr, dist, submap, beta, h2, kinship, fraternity));
    return rcpp_result_gen;
END_RCPP
}
// liabilitySelectedIndsProbs
List liabilitySelectedIndsProbs(IntegerVector groupSize, NumericMatrix probaHaplos, NumericVector probaDemes, NumericVector liabilityOffsetDemes, NumericVector minimumLiability, NumericVector maximumLiability, double length_tiles, XPtr<matrix4> Haplos, IntegerVector chr, NumericVector dist, IntegerVector submap, NumericVector beta, double h2, bool kinship, bool fraternity);
RcppExport SEXP _Mozza_liabilitySelectedIndsProbs(SEXP groupSizeSEXP, SEXP probaHaplosSEXP, SEXP probaDemesSEXP, SEXP liabilityOffsetDemesSEXP, SEXP minimumLiabilitySEXP, SEXP maximumLiabilitySEXP, SEXP length_tilesSEXP, SEXP HaplosSEXP, SEXP chrSEXP, SEXP distSEXP, SEXP submapSEXP, SEXP betaSEXP, SEXP h2SEXP, SEXP kinshipSEXP, SEXP fraternitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type groupSize(groupSizeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type probaHaplos(probaHaplosSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probaDemes(probaDemesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type liabilityOffsetDemes(liabilityOffsetDemesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type minimumLiability(minimumLiabilitySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maximumLiability(maximumLiabilitySEXP);
    Rcpp::traits::input_parameter< double >::type length_tiles(length_tilesSEXP);
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type Haplos(HaplosSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type submap(submapSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< bool >::type kinship(kinshipSEXP);
    Rcpp::traits::input_parameter< bool >::type fraternity(fraternitySEXP);
    rcpp_result_gen = Rcpp::wrap(liabilitySelectedIndsProbs(groupSize, probaHaplos, probaDemes, liabilityOffsetDemes, minimumLiability, maximumLiability, length_tiles, Haplos, chr, dist, submap, beta, h2, kinship, fraternity));
    return rcpp_result_gen;
END_RCPP
}
// make_haps
List make_haps(int n, double length_tiles, XPtr<matrix4> Haplos, IntegerVector chr, NumericVector dist, bool ibd);
RcppExport SEXP _Mozza_make_haps(SEXP nSEXP, SEXP length_tilesSEXP, SEXP HaplosSEXP, SEXP chrSEXP, SEXP distSEXP, SEXP ibdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type length_tiles(length_tilesSEXP);
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type Haplos(HaplosSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< bool >::type ibd(ibdSEXP);
    rcpp_result_gen = Rcpp::wrap(make_haps(n, length_tiles, Haplos, chr, dist, ibd));
    return rcpp_result_gen;
END_RCPP
}
// make_haps_probs
List make_haps_probs(IntegerVector N, NumericMatrix proba_haplos, double length_tiles, XPtr<matrix4> Haplos, IntegerVector chr, NumericVector dist, bool ibd);
RcppExport SEXP _Mozza_make_haps_probs(SEXP NSEXP, SEXP proba_haplosSEXP, SEXP length_tilesSEXP, SEXP HaplosSEXP, SEXP chrSEXP, SEXP distSEXP, SEXP ibdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type proba_haplos(proba_haplosSEXP);
    Rcpp::traits::input_parameter< double >::type length_tiles(length_tilesSEXP);
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type Haplos(HaplosSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< bool >::type ibd(ibdSEXP);
    rcpp_result_gen = Rcpp::wrap(make_haps_probs(N, proba_haplos, length_tiles, Haplos, chr, dist, ibd));
    return rcpp_result_gen;
END_RCPP
}
// make_inbreds
List make_inbreds(unsigned int N, unsigned int n_haps, NumericVector le1, NumericVector le2, double length_tiles, bool segments);
RcppExport SEXP _Mozza_make_inbreds(SEXP NSEXP, SEXP n_hapsSEXP, SEXP le1SEXP, SEXP le2SEXP, SEXP length_tilesSEXP, SEXP segmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_haps(n_hapsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type le1(le1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type le2(le2SEXP);
    Rcpp::traits::input_parameter< double >::type length_tiles(length_tilesSEXP);
    Rcpp::traits::input_parameter< bool >::type segments(segmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(make_inbreds(N, n_haps, le1, le2, length_tiles, segments));
    return rcpp_result_gen;
END_RCPP
}
// make_inds
List make_inds(int n, unsigned int n_haps, double length_tiles);
RcppExport SEXP _Mozza_make_inds(SEXP nSEXP, SEXP n_hapsSEXP, SEXP length_tilesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_haps(n_hapsSEXP);
    Rcpp::traits::input_parameter< double >::type length_tiles(length_tilesSEXP);
    rcpp_result_gen = Rcpp::wrap(make_inds(n, n_haps, length_tiles));
    return rcpp_result_gen;
END_RCPP
}
// make_inds_probs
List make_inds_probs(IntegerVector N, NumericMatrix proba_haplos, double length_tiles);
RcppExport SEXP _Mozza_make_inds_probs(SEXP NSEXP, SEXP proba_haplosSEXP, SEXP length_tilesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type proba_haplos(proba_haplosSEXP);
    Rcpp::traits::input_parameter< double >::type length_tiles(length_tilesSEXP);
    rcpp_result_gen = Rcpp::wrap(make_inds_probs(N, proba_haplos, length_tiles));
    return rcpp_result_gen;
END_RCPP
}
// make_pairs
List make_pairs(int N, double le1, double le2, double length_tiles, XPtr<matrix4> Haplos, IntegerVector chr, NumericVector dist);
RcppExport SEXP _Mozza_make_pairs(SEXP NSEXP, SEXP le1SEXP, SEXP le2SEXP, SEXP length_tilesSEXP, SEXP HaplosSEXP, SEXP chrSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type le1(le1SEXP);
    Rcpp::traits::input_parameter< double >::type le2(le2SEXP);
    Rcpp::traits::input_parameter< double >::type length_tiles(length_tilesSEXP);
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type Haplos(HaplosSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(make_pairs(N, le1, le2, length_tiles, Haplos, chr, dist));
    return rcpp_result_gen;
END_RCPP
}
// nuclear_families
List nuclear_families(int nb_fams, int nb_offsprings, double tile_length, XPtr<matrix4> Haplos, IntegerVector chr, NumericVector dist, bool kinship, bool fraternity);
RcppExport SEXP _Mozza_nuclear_families(SEXP nb_famsSEXP, SEXP nb_offspringsSEXP, SEXP tile_lengthSEXP, SEXP HaplosSEXP, SEXP chrSEXP, SEXP distSEXP, SEXP kinshipSEXP, SEXP fraternitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nb_fams(nb_famsSEXP);
    Rcpp::traits::input_parameter< int >::type nb_offsprings(nb_offspringsSEXP);
    Rcpp::traits::input_parameter< double >::type tile_length(tile_lengthSEXP);
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type Haplos(HaplosSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< bool >::type kinship(kinshipSEXP);
    Rcpp::traits::input_parameter< bool >::type fraternity(fraternitySEXP);
    rcpp_result_gen = Rcpp::wrap(nuclear_families(nb_fams, nb_offsprings, tile_length, Haplos, chr, dist, kinship, fraternity));
    return rcpp_result_gen;
END_RCPP
}
// nuclear_families_probs
List nuclear_families_probs(IntegerVector Nfams, int nb_offsprings, NumericMatrix proba_haplos, double length_tiles, XPtr<matrix4> Haplos, IntegerVector chr, NumericVector dist, bool kinship, bool fraternity);
RcppExport SEXP _Mozza_nuclear_families_probs(SEXP NfamsSEXP, SEXP nb_offspringsSEXP, SEXP proba_haplosSEXP, SEXP length_tilesSEXP, SEXP HaplosSEXP, SEXP chrSEXP, SEXP distSEXP, SEXP kinshipSEXP, SEXP fraternitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Nfams(NfamsSEXP);
    Rcpp::traits::input_parameter< int >::type nb_offsprings(nb_offspringsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type proba_haplos(proba_haplosSEXP);
    Rcpp::traits::input_parameter< double >::type length_tiles(length_tilesSEXP);
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type Haplos(HaplosSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< bool >::type kinship(kinshipSEXP);
    Rcpp::traits::input_parameter< bool >::type fraternity(fraternitySEXP);
    rcpp_result_gen = Rcpp::wrap(nuclear_families_probs(Nfams, nb_offsprings, proba_haplos, length_tiles, Haplos, chr, dist, kinship, fraternity));
    return rcpp_result_gen;
END_RCPP
}
// pasteVcfElts
std::string pasteVcfElts(CharacterVector genoN, IntegerVector rd, IntegerVector rd2, IntegerVector rd3, IntegerVector GQ, NumericMatrix phtab);
RcppExport SEXP _Mozza_pasteVcfElts(SEXP genoNSEXP, SEXP rdSEXP, SEXP rd2SEXP, SEXP rd3SEXP, SEXP GQSEXP, SEXP phtabSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type genoN(genoNSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rd(rdSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rd2(rd2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rd3(rd3SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type GQ(GQSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phtab(phtabSEXP);
    rcpp_result_gen = Rcpp::wrap(pasteVcfElts(genoN, rd, rd2, rd3, GQ, phtab));
    return rcpp_result_gen;
END_RCPP
}
// population
List population(int n0, int nGen, int keep, double lambda, double tile_length, XPtr<matrix4> Haplos, IntegerVector chr, NumericVector dist, bool kinship, bool fraternity);
RcppExport SEXP _Mozza_population(SEXP n0SEXP, SEXP nGenSEXP, SEXP keepSEXP, SEXP lambdaSEXP, SEXP tile_lengthSEXP, SEXP HaplosSEXP, SEXP chrSEXP, SEXP distSEXP, SEXP kinshipSEXP, SEXP fraternitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< int >::type nGen(nGenSEXP);
    Rcpp::traits::input_parameter< int >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tile_length(tile_lengthSEXP);
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type Haplos(HaplosSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< bool >::type kinship(kinshipSEXP);
    Rcpp::traits::input_parameter< bool >::type fraternity(fraternitySEXP);
    rcpp_result_gen = Rcpp::wrap(population(n0, nGen, keep, lambda, tile_length, Haplos, chr, dist, kinship, fraternity));
    return rcpp_result_gen;
END_RCPP
}
// reproduce_
Rcpp::XPtr<mozza::zygote> reproduce_(Rcpp::XPtr<mozza::zygote> z1, Rcpp::XPtr<mozza::zygote> z2);
RcppExport SEXP _Mozza_reproduce_(SEXP z1SEXP, SEXP z2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<mozza::zygote> >::type z1(z1SEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<mozza::zygote> >::type z2(z2SEXP);
    rcpp_result_gen = Rcpp::wrap(reproduce_(z1, z2));
    return rcpp_result_gen;
END_RCPP
}
// reproduce_vec
Rcpp::List reproduce_vec(Rcpp::List Z1, Rcpp::List Z2);
RcppExport SEXP _Mozza_reproduce_vec(SEXP Z1SEXP, SEXP Z2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Z1(Z1SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Z2(Z2SEXP);
    rcpp_result_gen = Rcpp::wrap(reproduce_vec(Z1, Z2));
    return rcpp_result_gen;
END_RCPP
}
// essai
void essai();
RcppExport SEXP _Mozza_essai() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    essai();
    return R_NilValue;
END_RCPP
}
// test_cursor
void test_cursor();
RcppExport SEXP _Mozza_test_cursor() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_cursor();
    return R_NilValue;
END_RCPP
}
// essai2
void essai2();
RcppExport SEXP _Mozza_essai2() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    essai2();
    return R_NilValue;
END_RCPP
}
// essai3
void essai3();
RcppExport SEXP _Mozza_essai3() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    essai3();
    return R_NilValue;
END_RCPP
}
// essai3bis
void essai3bis();
RcppExport SEXP _Mozza_essai3bis() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    essai3bis();
    return R_NilValue;
END_RCPP
}
// test_IBD_sharing
List test_IBD_sharing(int n, double le1, double le2);
RcppExport SEXP _Mozza_test_IBD_sharing(SEXP nSEXP, SEXP le1SEXP, SEXP le2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type le1(le1SEXP);
    Rcpp::traits::input_parameter< double >::type le2(le2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_IBD_sharing(n, le1, le2));
    return rcpp_result_gen;
END_RCPP
}
// test_IBD_sibs
List test_IBD_sibs(int n, int n_haps, double length_tiles);
RcppExport SEXP _Mozza_test_IBD_sibs(SEXP nSEXP, SEXP n_hapsSEXP, SEXP length_tilesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n_haps(n_hapsSEXP);
    Rcpp::traits::input_parameter< double >::type length_tiles(length_tilesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_IBD_sibs(n, n_haps, length_tiles));
    return rcpp_result_gen;
END_RCPP
}
// test_xptr
XPtr<matrix4> test_xptr(XPtr<matrix4> Haplos, IntegerVector chr, NumericVector dist);
RcppExport SEXP _Mozza_test_xptr(SEXP HaplosSEXP, SEXP chrSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type Haplos(HaplosSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(test_xptr(Haplos, chr, dist));
    return rcpp_result_gen;
END_RCPP
}
// families_of_4_v0
XPtr<matrix4> families_of_4_v0(int N, XPtr<matrix4> Haplos, IntegerVector chr, NumericVector dist);
RcppExport SEXP _Mozza_families_of_4_v0(SEXP NSEXP, SEXP HaplosSEXP, SEXP chrSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type Haplos(HaplosSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(families_of_4_v0(N, Haplos, chr, dist));
    return rcpp_result_gen;
END_RCPP
}
// families_of_4
XPtr<matrix4> families_of_4(int N, XPtr<matrix4> Haplos, IntegerVector chr, NumericVector dist);
RcppExport SEXP _Mozza_families_of_4(SEXP NSEXP, SEXP HaplosSEXP, SEXP chrSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type Haplos(HaplosSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(families_of_4(N, Haplos, chr, dist));
    return rcpp_result_gen;
END_RCPP
}
// write_hap_file
void write_hap_file(XPtr<matrix4> p_A, std::string filename);
RcppExport SEXP _Mozza_write_hap_file(SEXP p_ASEXP, SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    write_hap_file(p_A, filename);
    return R_NilValue;
END_RCPP
}
// zygote_
Rcpp::XPtr<mozza::zygote> zygote_(int ntiles, double mean_length_tiles);
RcppExport SEXP _Mozza_zygote_(SEXP ntilesSEXP, SEXP mean_length_tilesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ntiles(ntilesSEXP);
    Rcpp::traits::input_parameter< double >::type mean_length_tiles(mean_length_tilesSEXP);
    rcpp_result_gen = Rcpp::wrap(zygote_(ntiles, mean_length_tiles));
    return rcpp_result_gen;
END_RCPP
}
// zygote_probs
Rcpp::XPtr<mozza::zygote> zygote_probs(NumericVector probaTiles, double mean_length_tiles);
RcppExport SEXP _Mozza_zygote_probs(SEXP probaTilesSEXP, SEXP mean_length_tilesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type probaTiles(probaTilesSEXP);
    Rcpp::traits::input_parameter< double >::type mean_length_tiles(mean_length_tilesSEXP);
    rcpp_result_gen = Rcpp::wrap(zygote_probs(probaTiles, mean_length_tiles));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Mozza_GQ", (DL_FUNC) &_Mozza_GQ, 1},
    {"_Mozza_GT", (DL_FUNC) &_Mozza_GT, 1},
    {"_Mozza_cousins_1stdegree", (DL_FUNC) &_Mozza_cousins_1stdegree, 7},
    {"_Mozza_drop_genotypes", (DL_FUNC) &_Mozza_drop_genotypes, 4},
    {"_Mozza_drop_genotypes_to_vcf", (DL_FUNC) &_Mozza_drop_genotypes_to_vcf, 9},
    {"_Mozza_haplo_drop_tile_index", (DL_FUNC) &_Mozza_haplo_drop_tile_index, 3},
    {"_Mozza_zygote_drop_tile_index", (DL_FUNC) &_Mozza_zygote_drop_tile_index, 3},
    {"_Mozza_getAutosomes", (DL_FUNC) &_Mozza_getAutosomes, 0},
    {"_Mozza_setAutosomes", (DL_FUNC) &_Mozza_setAutosomes, 1},
    {"_Mozza_getGenoVector", (DL_FUNC) &_Mozza_getGenoVector, 3},
    {"_Mozza_haplo_group_by_tile_index", (DL_FUNC) &_Mozza_haplo_group_by_tile_index, 3},
    {"_Mozza_zygote_group_by_tile_index", (DL_FUNC) &_Mozza_zygote_group_by_tile_index, 3},
    {"_Mozza_haplotype_", (DL_FUNC) &_Mozza_haplotype_, 2},
    {"_Mozza_haplotype_probs", (DL_FUNC) &_Mozza_haplotype_probs, 2},
    {"_Mozza_haplotype_peek", (DL_FUNC) &_Mozza_haplotype_peek, 1},
    {"_Mozza_zygote_peek", (DL_FUNC) &_Mozza_zygote_peek, 1},
    {"_Mozza_haplotype_poke", (DL_FUNC) &_Mozza_haplotype_poke, 3},
    {"_Mozza_zygote_poke", (DL_FUNC) &_Mozza_zygote_poke, 5},
    {"_Mozza_kinship_matrix_", (DL_FUNC) &_Mozza_kinship_matrix_, 1},
    {"_Mozza_liabilitySelectedInds", (DL_FUNC) &_Mozza_liabilitySelectedInds, 12},
    {"_Mozza_liabilitySelectedIndsProbs", (DL_FUNC) &_Mozza_liabilitySelectedIndsProbs, 15},
    {"_Mozza_make_haps", (DL_FUNC) &_Mozza_make_haps, 6},
    {"_Mozza_make_haps_probs", (DL_FUNC) &_Mozza_make_haps_probs, 7},
    {"_Mozza_make_inbreds", (DL_FUNC) &_Mozza_make_inbreds, 6},
    {"_Mozza_make_inds", (DL_FUNC) &_Mozza_make_inds, 3},
    {"_Mozza_make_inds_probs", (DL_FUNC) &_Mozza_make_inds_probs, 3},
    {"_Mozza_make_pairs", (DL_FUNC) &_Mozza_make_pairs, 7},
    {"_Mozza_nuclear_families", (DL_FUNC) &_Mozza_nuclear_families, 8},
    {"_Mozza_nuclear_families_probs", (DL_FUNC) &_Mozza_nuclear_families_probs, 9},
    {"_Mozza_pasteVcfElts", (DL_FUNC) &_Mozza_pasteVcfElts, 6},
    {"_Mozza_population", (DL_FUNC) &_Mozza_population, 10},
    {"_Mozza_reproduce_", (DL_FUNC) &_Mozza_reproduce_, 2},
    {"_Mozza_reproduce_vec", (DL_FUNC) &_Mozza_reproduce_vec, 2},
    {"_Mozza_essai", (DL_FUNC) &_Mozza_essai, 0},
    {"_Mozza_test_cursor", (DL_FUNC) &_Mozza_test_cursor, 0},
    {"_Mozza_essai2", (DL_FUNC) &_Mozza_essai2, 0},
    {"_Mozza_essai3", (DL_FUNC) &_Mozza_essai3, 0},
    {"_Mozza_essai3bis", (DL_FUNC) &_Mozza_essai3bis, 0},
    {"_Mozza_test_IBD_sharing", (DL_FUNC) &_Mozza_test_IBD_sharing, 3},
    {"_Mozza_test_IBD_sibs", (DL_FUNC) &_Mozza_test_IBD_sibs, 3},
    {"_Mozza_test_xptr", (DL_FUNC) &_Mozza_test_xptr, 3},
    {"_Mozza_families_of_4_v0", (DL_FUNC) &_Mozza_families_of_4_v0, 4},
    {"_Mozza_families_of_4", (DL_FUNC) &_Mozza_families_of_4, 4},
    {"_Mozza_write_hap_file", (DL_FUNC) &_Mozza_write_hap_file, 2},
    {"_Mozza_zygote_", (DL_FUNC) &_Mozza_zygote_, 2},
    {"_Mozza_zygote_probs", (DL_FUNC) &_Mozza_zygote_probs, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_Mozza(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
